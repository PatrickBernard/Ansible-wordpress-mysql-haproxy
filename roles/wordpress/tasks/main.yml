---

- name: Install Packages For Wordpress, apache, php-fpm
  ansible.builtin.apt:
    update_cache: true
    pkg:
      - apache2
      - php
      - php-fpm
      - php-mbstring
      - php-bcmath
      - php-xml
      - php-mysql
      - php-common
      - php-gd
      - php-cli
      - php-curl
      - php-zip
      - php-imagick
      - php-ldap
      - php-intl

- name: Enable module for php-fpm
  community.general.apache2_module:
    name: "{{ item }}"
    state: present
  loop:
    - proxy_fcgi
    - setenvif
  notify: restart_apache

- name: Enable conf for php-fpm
  ansible.builtin.command: a2enconf php8.2-fpm
  changed_when: false
  when: ansible_facts['distribution'] == "Debian" and ansible_facts['distribution_major_version'] == "12"
  notify: restart_apache

- name: Enable conf for php-fpm
  ansible.builtin.command: a2enconf php7.4-fpm
  changed_when: false
  when: ansible_facts['distribution'] == "Debian" and ansible_facts['distribution_major_version'] == "11"
  notify: restart_apache

- name: Download wordpress
  ansible.builtin.get_url:
    url: "{{ wordpress_url }}"
    dest: "{{ wordpress_path }}"
    checksum: "{{ wordpress_md5 }}"
    mode: "0644"
  register: r_wordpress_directory
  tags: dl_wp

- name: Unarchive Wordpress
  ansible.builtin.unarchive:
    src: "{{ r_wordpress_directory.dest }}"
    dest: "{{ web_path }}"
    remote_src: true
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    mode: "0644"
  tags: dl_wp

- name: Create wp-config.php file
  ansible.builtin.copy:
    src: "{{ web_path }}{{ wordpress_file_default }}"
    dest: "{{ web_path }}{{ wordpress_file_path }}"
    remote_src: true
    owner: "{{ web_owner }}"
    group: "{{ web_group }}"
    mode: "0644"

- name: Configure wp-config.php file Database Name
  ansible.builtin.lineinfile:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    regexp: '^(.*)database_name_here(.*)$'
    line: "define( 'DB_NAME', '{{ db_name }}' );"

- name: Configure wp-config.php file Database user
  ansible.builtin.lineinfile:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    regexp: '^(.*)username_here(.*)$'
    line: "define( 'DB_USER', '{{ db_user }}' );"

- name: Configure wp-config.php file Database user password
  ansible.builtin.lineinfile:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    regexp: '^(.*)password_here(.*)$'
    line: "define( 'DB_PASSWORD', '{{ db_user_password }}' );"

- name: Configure wp-config.php file Database host
  ansible.builtin.lineinfile:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    regexp: '^(.*)localhost(.*)$'
    line: "define( 'DB_HOST', '{{ db_host }}' );"
  notify: restart_apache

- name: Delete lines in wp-config.php
  ansible.builtin.replace:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    regexp: "(.*)put your unique phrase here(.*)"

- name: Download salt file
  ansible.builtin.get_url:
    url: https://api.wordpress.org/secret-key/1.1/salt
    dest: "/tmp/salt.txt"
    mode: "0644"

- name: Get contents of salt file
  ansible.builtin.slurp:
    src: "/tmp/salt.txt"
  register: r_salts_content

- name: Append salt file content to wp-config.php
  ansible.builtin.blockinfile:
    path: "{{ web_path }}{{ wordpress_file_path }}"
    block: "{{ r_salts_content['content'] | b64decode }}"
    insertafter: "EOF"

- name: Create httpd virtual host
  ansible.builtin.template:
    src: files/site.conf.j2
    dest: "/etc/apache2/sites-available/{{ site_domain }}.conf"
    owner: root
    group: root
    mode: "0644"

- name: Enable config
  ansible.builtin.command: a2ensite "{{ site_domain }}".conf
  changed_when: false
  notify: restart_apache

- name: Disable default config
  ansible.builtin.command: a2dissite 000-default.conf
  changed_when: false
  notify: restart_apache
